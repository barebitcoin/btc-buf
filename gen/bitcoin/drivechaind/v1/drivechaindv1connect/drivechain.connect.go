// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bitcoin/drivechaind/v1/drivechain.proto

package drivechaindv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/barebitcoin/btc-buf/gen/bitcoin/drivechaind/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DrivechainServiceName is the fully-qualified name of the DrivechainService service.
	DrivechainServiceName = "bitcoin.drivechaind.v1.DrivechainService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DrivechainServiceCreateSidechainDepositProcedure is the fully-qualified name of the
	// DrivechainService's CreateSidechainDeposit RPC.
	DrivechainServiceCreateSidechainDepositProcedure = "/bitcoin.drivechaind.v1.DrivechainService/CreateSidechainDeposit"
	// DrivechainServiceListActiveSidechainsProcedure is the fully-qualified name of the
	// DrivechainService's ListActiveSidechains RPC.
	DrivechainServiceListActiveSidechainsProcedure = "/bitcoin.drivechaind.v1.DrivechainService/ListActiveSidechains"
	// DrivechainServiceListSidechainDepositsProcedure is the fully-qualified name of the
	// DrivechainService's ListSidechainDeposits RPC.
	DrivechainServiceListSidechainDepositsProcedure = "/bitcoin.drivechaind.v1.DrivechainService/ListSidechainDeposits"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	drivechainServiceServiceDescriptor                      = v1.File_bitcoin_drivechaind_v1_drivechain_proto.Services().ByName("DrivechainService")
	drivechainServiceCreateSidechainDepositMethodDescriptor = drivechainServiceServiceDescriptor.Methods().ByName("CreateSidechainDeposit")
	drivechainServiceListActiveSidechainsMethodDescriptor   = drivechainServiceServiceDescriptor.Methods().ByName("ListActiveSidechains")
	drivechainServiceListSidechainDepositsMethodDescriptor  = drivechainServiceServiceDescriptor.Methods().ByName("ListSidechainDeposits")
)

// DrivechainServiceClient is a client for the bitcoin.drivechaind.v1.DrivechainService service.
type DrivechainServiceClient interface {
	CreateSidechainDeposit(context.Context, *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error)
	ListActiveSidechains(context.Context, *connect.Request[v1.ListActiveSidechainsRequest]) (*connect.Response[v1.ListActiveSidechainsResponse], error)
	ListSidechainDeposits(context.Context, *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error)
}

// NewDrivechainServiceClient constructs a client for the bitcoin.drivechaind.v1.DrivechainService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDrivechainServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DrivechainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &drivechainServiceClient{
		createSidechainDeposit: connect.NewClient[v1.CreateSidechainDepositRequest, v1.CreateSidechainDepositResponse](
			httpClient,
			baseURL+DrivechainServiceCreateSidechainDepositProcedure,
			connect.WithSchema(drivechainServiceCreateSidechainDepositMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listActiveSidechains: connect.NewClient[v1.ListActiveSidechainsRequest, v1.ListActiveSidechainsResponse](
			httpClient,
			baseURL+DrivechainServiceListActiveSidechainsProcedure,
			connect.WithSchema(drivechainServiceListActiveSidechainsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSidechainDeposits: connect.NewClient[v1.ListSidechainDepositsRequest, v1.ListSidechainDepositsResponse](
			httpClient,
			baseURL+DrivechainServiceListSidechainDepositsProcedure,
			connect.WithSchema(drivechainServiceListSidechainDepositsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// drivechainServiceClient implements DrivechainServiceClient.
type drivechainServiceClient struct {
	createSidechainDeposit *connect.Client[v1.CreateSidechainDepositRequest, v1.CreateSidechainDepositResponse]
	listActiveSidechains   *connect.Client[v1.ListActiveSidechainsRequest, v1.ListActiveSidechainsResponse]
	listSidechainDeposits  *connect.Client[v1.ListSidechainDepositsRequest, v1.ListSidechainDepositsResponse]
}

// CreateSidechainDeposit calls bitcoin.drivechaind.v1.DrivechainService.CreateSidechainDeposit.
func (c *drivechainServiceClient) CreateSidechainDeposit(ctx context.Context, req *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error) {
	return c.createSidechainDeposit.CallUnary(ctx, req)
}

// ListActiveSidechains calls bitcoin.drivechaind.v1.DrivechainService.ListActiveSidechains.
func (c *drivechainServiceClient) ListActiveSidechains(ctx context.Context, req *connect.Request[v1.ListActiveSidechainsRequest]) (*connect.Response[v1.ListActiveSidechainsResponse], error) {
	return c.listActiveSidechains.CallUnary(ctx, req)
}

// ListSidechainDeposits calls bitcoin.drivechaind.v1.DrivechainService.ListSidechainDeposits.
func (c *drivechainServiceClient) ListSidechainDeposits(ctx context.Context, req *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error) {
	return c.listSidechainDeposits.CallUnary(ctx, req)
}

// DrivechainServiceHandler is an implementation of the bitcoin.drivechaind.v1.DrivechainService
// service.
type DrivechainServiceHandler interface {
	CreateSidechainDeposit(context.Context, *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error)
	ListActiveSidechains(context.Context, *connect.Request[v1.ListActiveSidechainsRequest]) (*connect.Response[v1.ListActiveSidechainsResponse], error)
	ListSidechainDeposits(context.Context, *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error)
}

// NewDrivechainServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDrivechainServiceHandler(svc DrivechainServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	drivechainServiceCreateSidechainDepositHandler := connect.NewUnaryHandler(
		DrivechainServiceCreateSidechainDepositProcedure,
		svc.CreateSidechainDeposit,
		connect.WithSchema(drivechainServiceCreateSidechainDepositMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	drivechainServiceListActiveSidechainsHandler := connect.NewUnaryHandler(
		DrivechainServiceListActiveSidechainsProcedure,
		svc.ListActiveSidechains,
		connect.WithSchema(drivechainServiceListActiveSidechainsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	drivechainServiceListSidechainDepositsHandler := connect.NewUnaryHandler(
		DrivechainServiceListSidechainDepositsProcedure,
		svc.ListSidechainDeposits,
		connect.WithSchema(drivechainServiceListSidechainDepositsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/bitcoin.drivechaind.v1.DrivechainService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DrivechainServiceCreateSidechainDepositProcedure:
			drivechainServiceCreateSidechainDepositHandler.ServeHTTP(w, r)
		case DrivechainServiceListActiveSidechainsProcedure:
			drivechainServiceListActiveSidechainsHandler.ServeHTTP(w, r)
		case DrivechainServiceListSidechainDepositsProcedure:
			drivechainServiceListSidechainDepositsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDrivechainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDrivechainServiceHandler struct{}

func (UnimplementedDrivechainServiceHandler) CreateSidechainDeposit(context.Context, *connect.Request[v1.CreateSidechainDepositRequest]) (*connect.Response[v1.CreateSidechainDepositResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.drivechaind.v1.DrivechainService.CreateSidechainDeposit is not implemented"))
}

func (UnimplementedDrivechainServiceHandler) ListActiveSidechains(context.Context, *connect.Request[v1.ListActiveSidechainsRequest]) (*connect.Response[v1.ListActiveSidechainsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.drivechaind.v1.DrivechainService.ListActiveSidechains is not implemented"))
}

func (UnimplementedDrivechainServiceHandler) ListSidechainDeposits(context.Context, *connect.Request[v1.ListSidechainDepositsRequest]) (*connect.Response[v1.ListSidechainDepositsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bitcoin.drivechaind.v1.DrivechainService.ListSidechainDeposits is not implemented"))
}
