// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: bitcoin/bitcoind/v1alpha/bitcoin.proto

package bitcoindv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTransactionResponse_Replaceable int32

const (
	GetTransactionResponse_REPLACEABLE_UNSPECIFIED GetTransactionResponse_Replaceable = 0
	GetTransactionResponse_REPLACEABLE_YES         GetTransactionResponse_Replaceable = 1
	GetTransactionResponse_REPLACEABLE_NO          GetTransactionResponse_Replaceable = 2
)

// Enum value maps for GetTransactionResponse_Replaceable.
var (
	GetTransactionResponse_Replaceable_name = map[int32]string{
		0: "REPLACEABLE_UNSPECIFIED",
		1: "REPLACEABLE_YES",
		2: "REPLACEABLE_NO",
	}
	GetTransactionResponse_Replaceable_value = map[string]int32{
		"REPLACEABLE_UNSPECIFIED": 0,
		"REPLACEABLE_YES":         1,
		"REPLACEABLE_NO":          2,
	}
)

func (x GetTransactionResponse_Replaceable) Enum() *GetTransactionResponse_Replaceable {
	p := new(GetTransactionResponse_Replaceable)
	*p = x
	return p
}

func (x GetTransactionResponse_Replaceable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTransactionResponse_Replaceable) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[0].Descriptor()
}

func (GetTransactionResponse_Replaceable) Type() protoreflect.EnumType {
	return &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[0]
}

func (x GetTransactionResponse_Replaceable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTransactionResponse_Replaceable.Descriptor instead.
func (GetTransactionResponse_Replaceable) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{10, 0}
}

type GetTransactionResponse_Category int32

const (
	GetTransactionResponse_CATEGORY_UNSPECIFIED GetTransactionResponse_Category = 0
	GetTransactionResponse_CATEGORY_SEND        GetTransactionResponse_Category = 1
	GetTransactionResponse_CATEGORY_RECEIVE     GetTransactionResponse_Category = 2
	GetTransactionResponse_CATEGORY_GENERATE    GetTransactionResponse_Category = 3
	GetTransactionResponse_CATEGORY_IMMATURE    GetTransactionResponse_Category = 4
	GetTransactionResponse_CATEGORY_ORPHAN      GetTransactionResponse_Category = 5
)

// Enum value maps for GetTransactionResponse_Category.
var (
	GetTransactionResponse_Category_name = map[int32]string{
		0: "CATEGORY_UNSPECIFIED",
		1: "CATEGORY_SEND",
		2: "CATEGORY_RECEIVE",
		3: "CATEGORY_GENERATE",
		4: "CATEGORY_IMMATURE",
		5: "CATEGORY_ORPHAN",
	}
	GetTransactionResponse_Category_value = map[string]int32{
		"CATEGORY_UNSPECIFIED": 0,
		"CATEGORY_SEND":        1,
		"CATEGORY_RECEIVE":     2,
		"CATEGORY_GENERATE":    3,
		"CATEGORY_IMMATURE":    4,
		"CATEGORY_ORPHAN":      5,
	}
)

func (x GetTransactionResponse_Category) Enum() *GetTransactionResponse_Category {
	p := new(GetTransactionResponse_Category)
	*p = x
	return p
}

func (x GetTransactionResponse_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTransactionResponse_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[1].Descriptor()
}

func (GetTransactionResponse_Category) Type() protoreflect.EnumType {
	return &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[1]
}

func (x GetTransactionResponse_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTransactionResponse_Category.Descriptor instead.
func (GetTransactionResponse_Category) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{10, 1}
}

type EstimateSmartFeeRequest_EstimateMode int32

const (
	EstimateSmartFeeRequest_ESTIMATE_MODE_UNSPECIFIED  EstimateSmartFeeRequest_EstimateMode = 0
	EstimateSmartFeeRequest_ESTIMATE_MODE_ECONOMICAL   EstimateSmartFeeRequest_EstimateMode = 1
	EstimateSmartFeeRequest_ESTIMATE_MODE_CONSERVATIVE EstimateSmartFeeRequest_EstimateMode = 2
)

// Enum value maps for EstimateSmartFeeRequest_EstimateMode.
var (
	EstimateSmartFeeRequest_EstimateMode_name = map[int32]string{
		0: "ESTIMATE_MODE_UNSPECIFIED",
		1: "ESTIMATE_MODE_ECONOMICAL",
		2: "ESTIMATE_MODE_CONSERVATIVE",
	}
	EstimateSmartFeeRequest_EstimateMode_value = map[string]int32{
		"ESTIMATE_MODE_UNSPECIFIED":  0,
		"ESTIMATE_MODE_ECONOMICAL":   1,
		"ESTIMATE_MODE_CONSERVATIVE": 2,
	}
)

func (x EstimateSmartFeeRequest_EstimateMode) Enum() *EstimateSmartFeeRequest_EstimateMode {
	p := new(EstimateSmartFeeRequest_EstimateMode)
	*p = x
	return p
}

func (x EstimateSmartFeeRequest_EstimateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EstimateSmartFeeRequest_EstimateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[2].Descriptor()
}

func (EstimateSmartFeeRequest_EstimateMode) Type() protoreflect.EnumType {
	return &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes[2]
}

func (x EstimateSmartFeeRequest_EstimateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EstimateSmartFeeRequest_EstimateMode.Descriptor instead.
func (EstimateSmartFeeRequest_EstimateMode) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{18, 0}
}

type GetBlockchainInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBlockchainInfoRequest) Reset() {
	*x = GetBlockchainInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainInfoRequest) ProtoMessage() {}

func (x *GetBlockchainInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockchainInfoRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{0}
}

type GetBlockchainInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestBlockHash        string `protobuf:"bytes,1,opt,name=best_block_hash,json=bestBlockHash,proto3" json:"best_block_hash,omitempty"`
	Chain                string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	ChainWork            string `protobuf:"bytes,3,opt,name=chain_work,json=chainWork,proto3" json:"chain_work,omitempty"`
	InitialBlockDownload bool   `protobuf:"varint,4,opt,name=initial_block_download,json=initialBlockDownload,proto3" json:"initial_block_download,omitempty"`
}

func (x *GetBlockchainInfoResponse) Reset() {
	*x = GetBlockchainInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainInfoResponse) ProtoMessage() {}

func (x *GetBlockchainInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockchainInfoResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{1}
}

func (x *GetBlockchainInfoResponse) GetBestBlockHash() string {
	if x != nil {
		return x.BestBlockHash
	}
	return ""
}

func (x *GetBlockchainInfoResponse) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *GetBlockchainInfoResponse) GetChainWork() string {
	if x != nil {
		return x.ChainWork
	}
	return ""
}

func (x *GetBlockchainInfoResponse) GetInitialBlockDownload() bool {
	if x != nil {
		return x.InitialBlockDownload
	}
	return false
}

type GetNewAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label       string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	AddressType string `protobuf:"bytes,2,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"`
	// Only needs to be set if dealing with multiple wallets at the same time.
	// TODO: better suited as a header?
	Wallet string `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *GetNewAddressRequest) Reset() {
	*x = GetNewAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAddressRequest) ProtoMessage() {}

func (x *GetNewAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAddressRequest.ProtoReflect.Descriptor instead.
func (*GetNewAddressRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{2}
}

func (x *GetNewAddressRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GetNewAddressRequest) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *GetNewAddressRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type GetNewAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetNewAddressResponse) Reset() {
	*x = GetNewAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewAddressResponse) ProtoMessage() {}

func (x *GetNewAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewAddressResponse.ProtoReflect.Descriptor instead.
func (*GetNewAddressResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{3}
}

func (x *GetNewAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetWalletInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only needs to be set if dealing with multiple wallets at the same time.
	// TODO: better suited as a header?
	Wallet string `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *GetWalletInfoRequest) Reset() {
	*x = GetWalletInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletInfoRequest) ProtoMessage() {}

func (x *GetWalletInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletInfoRequest.ProtoReflect.Descriptor instead.
func (*GetWalletInfoRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{4}
}

func (x *GetWalletInfoRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type GetWalletInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WalletName            string  `protobuf:"bytes,1,opt,name=wallet_name,json=walletName,proto3" json:"wallet_name,omitempty"`
	WalletVersion         int64   `protobuf:"varint,2,opt,name=wallet_version,json=walletVersion,proto3" json:"wallet_version,omitempty"`
	Format                string  `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	TxCount               int64   `protobuf:"varint,7,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`
	KeyPoolSize           int64   `protobuf:"varint,8,opt,name=key_pool_size,json=keyPoolSize,proto3" json:"key_pool_size,omitempty"`
	KeyPoolSizeHdInternal int64   `protobuf:"varint,9,opt,name=key_pool_size_hd_internal,json=keyPoolSizeHdInternal,proto3" json:"key_pool_size_hd_internal,omitempty"`
	PayTxFee              float64 `protobuf:"fixed64,10,opt,name=pay_tx_fee,json=payTxFee,proto3" json:"pay_tx_fee,omitempty"`
	PrivateKeysEnabled    bool    `protobuf:"varint,11,opt,name=private_keys_enabled,json=privateKeysEnabled,proto3" json:"private_keys_enabled,omitempty"`
	AvoidReuse            bool    `protobuf:"varint,12,opt,name=avoid_reuse,json=avoidReuse,proto3" json:"avoid_reuse,omitempty"`
	// Not set if no scan is in progress.
	Scanning       *WalletScan `protobuf:"bytes,13,opt,name=scanning,proto3" json:"scanning,omitempty"`
	Descriptors    bool        `protobuf:"varint,14,opt,name=descriptors,proto3" json:"descriptors,omitempty"`
	ExternalSigner bool        `protobuf:"varint,15,opt,name=external_signer,json=externalSigner,proto3" json:"external_signer,omitempty"`
}

func (x *GetWalletInfoResponse) Reset() {
	*x = GetWalletInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWalletInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWalletInfoResponse) ProtoMessage() {}

func (x *GetWalletInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWalletInfoResponse.ProtoReflect.Descriptor instead.
func (*GetWalletInfoResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{5}
}

func (x *GetWalletInfoResponse) GetWalletName() string {
	if x != nil {
		return x.WalletName
	}
	return ""
}

func (x *GetWalletInfoResponse) GetWalletVersion() int64 {
	if x != nil {
		return x.WalletVersion
	}
	return 0
}

func (x *GetWalletInfoResponse) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *GetWalletInfoResponse) GetTxCount() int64 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *GetWalletInfoResponse) GetKeyPoolSize() int64 {
	if x != nil {
		return x.KeyPoolSize
	}
	return 0
}

func (x *GetWalletInfoResponse) GetKeyPoolSizeHdInternal() int64 {
	if x != nil {
		return x.KeyPoolSizeHdInternal
	}
	return 0
}

func (x *GetWalletInfoResponse) GetPayTxFee() float64 {
	if x != nil {
		return x.PayTxFee
	}
	return 0
}

func (x *GetWalletInfoResponse) GetPrivateKeysEnabled() bool {
	if x != nil {
		return x.PrivateKeysEnabled
	}
	return false
}

func (x *GetWalletInfoResponse) GetAvoidReuse() bool {
	if x != nil {
		return x.AvoidReuse
	}
	return false
}

func (x *GetWalletInfoResponse) GetScanning() *WalletScan {
	if x != nil {
		return x.Scanning
	}
	return nil
}

func (x *GetWalletInfoResponse) GetDescriptors() bool {
	if x != nil {
		return x.Descriptors
	}
	return false
}

func (x *GetWalletInfoResponse) GetExternalSigner() bool {
	if x != nil {
		return x.ExternalSigner
	}
	return false
}

type GetBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallet string `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *GetBalancesRequest) Reset() {
	*x = GetBalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesRequest) ProtoMessage() {}

func (x *GetBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesRequest.ProtoReflect.Descriptor instead.
func (*GetBalancesRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{6}
}

func (x *GetBalancesRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

type GetBalancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mine      *GetBalancesResponse_Mine      `protobuf:"bytes,1,opt,name=mine,proto3" json:"mine,omitempty"`
	Watchonly *GetBalancesResponse_Watchonly `protobuf:"bytes,2,opt,name=watchonly,proto3" json:"watchonly,omitempty"`
}

func (x *GetBalancesResponse) Reset() {
	*x = GetBalancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesResponse) ProtoMessage() {}

func (x *GetBalancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesResponse.ProtoReflect.Descriptor instead.
func (*GetBalancesResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{7}
}

func (x *GetBalancesResponse) GetMine() *GetBalancesResponse_Mine {
	if x != nil {
		return x.Mine
	}
	return nil
}

func (x *GetBalancesResponse) GetWatchonly() *GetBalancesResponse_Watchonly {
	if x != nil {
		return x.Watchonly
	}
	return nil
}

type WalletScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration int64   `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Progress float64 `protobuf:"fixed64,2,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *WalletScan) Reset() {
	*x = WalletScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletScan) ProtoMessage() {}

func (x *WalletScan) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletScan.ProtoReflect.Descriptor instead.
func (*WalletScan) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{8}
}

func (x *WalletScan) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *WalletScan) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid             string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	IncludeWatchonly bool   `protobuf:"varint,2,opt,name=include_watchonly,json=includeWatchonly,proto3" json:"include_watchonly,omitempty"`
	Verbose          bool   `protobuf:"varint,3,opt,name=verbose,proto3" json:"verbose,omitempty"`
	Wallet           string `protobuf:"bytes,4,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{9}
}

func (x *GetTransactionRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetTransactionRequest) GetIncludeWatchonly() bool {
	if x != nil {
		return x.IncludeWatchonly
	}
	return false
}

func (x *GetTransactionRequest) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *GetTransactionRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

// Commented fields are not present in btcd/rpcclient
type GetTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee    float64 `protobuf:"fixed64,2,opt,name=fee,proto3" json:"fee,omitempty"`
	// The number of confirmations for the transaction. Negative
	// confirmations means the transaction conflicted that many
	// blocks ago.
	Confirmations int32 `protobuf:"varint,3,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// bool generated = 4;
	// bool trusted = 5;
	BlockHash string `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	// string block_height = 7;
	BlockIndex uint32                 `protobuf:"varint,8,opt,name=block_index,json=blockIndex,proto3" json:"block_index,omitempty"`
	BlockTime  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	Txid       string                 `protobuf:"bytes,10,opt,name=txid,proto3" json:"txid,omitempty"`
	// string witness_txid = 11;
	WalletConflicts []string `protobuf:"bytes,12,rep,name=wallet_conflicts,json=walletConflicts,proto3" json:"wallet_conflicts,omitempty"`
	ReplacedByTxid  string   `protobuf:"bytes,13,opt,name=replaced_by_txid,json=replacedByTxid,proto3" json:"replaced_by_txid,omitempty"`
	ReplacesTxid    string   `protobuf:"bytes,14,opt,name=replaces_txid,json=replacesTxid,proto3" json:"replaces_txid,omitempty"`
	// string comment = 15;
	// string to = 16;
	Time         *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=time,proto3" json:"time,omitempty"`
	TimeReceived *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=time_received,json=timeReceived,proto3" json:"time_received,omitempty"`
	// Whether this transaction signals BIP125 (Replace-by-fee, RBF) replaceability
	// or has an unconfirmed ancestor signaling BIP125 replaceability. May be unspecified
	// for unconfirmed transactions not in the mempool because their
	// unconfirmed ancestors are unknown.
	//
	// Note that this is always set to 'no' once the transaction is confirmed.
	Bip125Replaceable GetTransactionResponse_Replaceable `protobuf:"varint,19,opt,name=bip125_replaceable,json=bip125Replaceable,proto3,enum=bitcoin.bitcoind.v1alpha.GetTransactionResponse_Replaceable" json:"bip125_replaceable,omitempty"`
	Details           []*GetTransactionResponse_Details  `protobuf:"bytes,21,rep,name=details,proto3" json:"details,omitempty"`
	Hex               string                             `protobuf:"bytes,22,opt,name=hex,proto3" json:"hex,omitempty"`
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{10}
}

func (x *GetTransactionResponse) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetTransactionResponse) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *GetTransactionResponse) GetConfirmations() int32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetTransactionResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetTransactionResponse) GetBlockIndex() uint32 {
	if x != nil {
		return x.BlockIndex
	}
	return 0
}

func (x *GetTransactionResponse) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *GetTransactionResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetTransactionResponse) GetWalletConflicts() []string {
	if x != nil {
		return x.WalletConflicts
	}
	return nil
}

func (x *GetTransactionResponse) GetReplacedByTxid() string {
	if x != nil {
		return x.ReplacedByTxid
	}
	return ""
}

func (x *GetTransactionResponse) GetReplacesTxid() string {
	if x != nil {
		return x.ReplacesTxid
	}
	return ""
}

func (x *GetTransactionResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GetTransactionResponse) GetTimeReceived() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeReceived
	}
	return nil
}

func (x *GetTransactionResponse) GetBip125Replaceable() GetTransactionResponse_Replaceable {
	if x != nil {
		return x.Bip125Replaceable
	}
	return GetTransactionResponse_REPLACEABLE_UNSPECIFIED
}

func (x *GetTransactionResponse) GetDetails() []*GetTransactionResponse_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GetTransactionResponse) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type GetRawTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transaction ID. Required.
	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	// If false, returns just the hex string. Otherwise, returns the complete object.
	Verbose bool `protobuf:"varint,2,opt,name=verbose,proto3" json:"verbose,omitempty"`
}

func (x *GetRawTransactionRequest) Reset() {
	*x = GetRawTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTransactionRequest) ProtoMessage() {}

func (x *GetRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{11}
}

func (x *GetRawTransactionRequest) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GetRawTransactionRequest) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout uint32 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{12}
}

func (x *Input) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *Input) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

type ScriptPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ScriptPubKey) Reset() {
	*x = ScriptPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptPubKey) ProtoMessage() {}

func (x *ScriptPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptPubKey.ProtoReflect.Descriptor instead.
func (*ScriptPubKey) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{13}
}

func (x *ScriptPubKey) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ScriptPubKey) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The output index
	N            uint32        `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	ScriptPubKey *ScriptPubKey `protobuf:"bytes,3,opt,name=script_pub_key,json=scriptPubKey,proto3" json:"script_pub_key,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{14}
}

func (x *Output) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Output) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *Output) GetScriptPubKey() *ScriptPubKey {
	if x != nil {
		return x.ScriptPubKey
	}
	return nil
}

type GetRawTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx            *RawTransaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Inputs        []*Input        `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs       []*Output       `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Blockhash     string          `protobuf:"bytes,4,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Confirmations uint32          `protobuf:"varint,5,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	Time          int64           `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	Blocktime     int64           `protobuf:"varint,7,opt,name=blocktime,proto3" json:"blocktime,omitempty"`
}

func (x *GetRawTransactionResponse) Reset() {
	*x = GetRawTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTransactionResponse) ProtoMessage() {}

func (x *GetRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{15}
}

func (x *GetRawTransactionResponse) GetTx() *RawTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *GetRawTransactionResponse) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *GetRawTransactionResponse) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *GetRawTransactionResponse) GetBlockhash() string {
	if x != nil {
		return x.Blockhash
	}
	return ""
}

func (x *GetRawTransactionResponse) GetConfirmations() uint32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *GetRawTransactionResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetRawTransactionResponse) GetBlocktime() int64 {
	if x != nil {
		return x.Blocktime
	}
	return 0
}

type SendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bitcoin address -> BTC amount
	Destinations map[string]float64 `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// Confirmation target in blocks.
	ConfTarget uint32 `protobuf:"varint,2,opt,name=conf_target,json=confTarget,proto3" json:"conf_target,omitempty"`
	// Only needs to be set if dealing with multiple wallets at the same time.
	// TODO: better suited as a header?
	Wallet string `protobuf:"bytes,3,opt,name=wallet,proto3" json:"wallet,omitempty"`
	// Include inputs that are not safe to spend (unconfirmed transactions from
	// outside keys and unconfirmed replacement transactions.
	IncludeUnsafe bool `protobuf:"varint,4,opt,name=include_unsafe,json=includeUnsafe,proto3" json:"include_unsafe,omitempty"`
	// Outouts to subtract the fee from, specified as as address from the
	// 'destinations' field. The fee will be equally deducted from the amount of
	// each specified output.
	SubtractFeeFromOutputs []string `protobuf:"bytes,5,rep,name=subtract_fee_from_outputs,json=subtractFeeFromOutputs,proto3" json:"subtract_fee_from_outputs,omitempty"`
	// When false, returns a serialized transaction which will not be added
	// to the wallet or broadcast.
	//
	// This is a 'bool value' instead of a plain bool. This is clunky to
	// work with, but the alternative would have been to either:
	//
	//  1. Have this be a bool with the default value as the opposite of
	//     Bitcoin Core
	//  2. Rename the parameter to something else.
	//
	// Both of these seem bad.
	AddToWallet *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=add_to_wallet,json=addToWallet,proto3" json:"add_to_wallet,omitempty"`
	// Satoshis per virtual byte (sat/vB).
	FeeRate float64 `protobuf:"fixed64,7,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (x *SendRequest) Reset() {
	*x = SendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRequest) ProtoMessage() {}

func (x *SendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRequest.ProtoReflect.Descriptor instead.
func (*SendRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{16}
}

func (x *SendRequest) GetDestinations() map[string]float64 {
	if x != nil {
		return x.Destinations
	}
	return nil
}

func (x *SendRequest) GetConfTarget() uint32 {
	if x != nil {
		return x.ConfTarget
	}
	return 0
}

func (x *SendRequest) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *SendRequest) GetIncludeUnsafe() bool {
	if x != nil {
		return x.IncludeUnsafe
	}
	return false
}

func (x *SendRequest) GetSubtractFeeFromOutputs() []string {
	if x != nil {
		return x.SubtractFeeFromOutputs
	}
	return nil
}

func (x *SendRequest) GetAddToWallet() *wrapperspb.BoolValue {
	if x != nil {
		return x.AddToWallet
	}
	return nil
}

func (x *SendRequest) GetFeeRate() float64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

type SendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid     string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Complete bool   `protobuf:"varint,2,opt,name=complete,proto3" json:"complete,omitempty"`
	// If 'add_to_wallet' is false, the raw transaction with signature(s)
	Tx *RawTransaction `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *SendResponse) Reset() {
	*x = SendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResponse) ProtoMessage() {}

func (x *SendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResponse.ProtoReflect.Descriptor instead.
func (*SendResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{17}
}

func (x *SendResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *SendResponse) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *SendResponse) GetTx() *RawTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type EstimateSmartFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfTarget   int64                                `protobuf:"varint,1,opt,name=conf_target,json=confTarget,proto3" json:"conf_target,omitempty"`
	EstimateMode EstimateSmartFeeRequest_EstimateMode `protobuf:"varint,2,opt,name=estimate_mode,json=estimateMode,proto3,enum=bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest_EstimateMode" json:"estimate_mode,omitempty"`
}

func (x *EstimateSmartFeeRequest) Reset() {
	*x = EstimateSmartFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateSmartFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateSmartFeeRequest) ProtoMessage() {}

func (x *EstimateSmartFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateSmartFeeRequest.ProtoReflect.Descriptor instead.
func (*EstimateSmartFeeRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{18}
}

func (x *EstimateSmartFeeRequest) GetConfTarget() int64 {
	if x != nil {
		return x.ConfTarget
	}
	return 0
}

func (x *EstimateSmartFeeRequest) GetEstimateMode() EstimateSmartFeeRequest_EstimateMode {
	if x != nil {
		return x.EstimateMode
	}
	return EstimateSmartFeeRequest_ESTIMATE_MODE_UNSPECIFIED
}

type EstimateSmartFeeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Estimate fee rate in BTC/kvB (only present if no errors were encountered)
	FeeRate float64 `protobuf:"fixed64,1,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	// Errors encountered during processing (if there are any)
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// Block number where estimate was found.
	Blocks int64 `protobuf:"varint,3,opt,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *EstimateSmartFeeResponse) Reset() {
	*x = EstimateSmartFeeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateSmartFeeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateSmartFeeResponse) ProtoMessage() {}

func (x *EstimateSmartFeeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateSmartFeeResponse.ProtoReflect.Descriptor instead.
func (*EstimateSmartFeeResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{19}
}

func (x *EstimateSmartFeeResponse) GetFeeRate() float64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *EstimateSmartFeeResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *EstimateSmartFeeResponse) GetBlocks() int64 {
	if x != nil {
		return x.Blocks
	}
	return 0
}

type DecodeRawTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *RawTransaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *DecodeRawTransactionRequest) Reset() {
	*x = DecodeRawTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeRawTransactionRequest) ProtoMessage() {}

func (x *DecodeRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*DecodeRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{20}
}

func (x *DecodeRawTransactionRequest) GetTx() *RawTransaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

type RawTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw transaction data
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Hex-encoded raw transaction data
	Hex string `protobuf:"bytes,2,opt,name=hex,proto3" json:"hex,omitempty"`
}

func (x *RawTransaction) Reset() {
	*x = RawTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTransaction) ProtoMessage() {}

func (x *RawTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTransaction.ProtoReflect.Descriptor instead.
func (*RawTransaction) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{21}
}

func (x *RawTransaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RawTransaction) GetHex() string {
	if x != nil {
		return x.Hex
	}
	return ""
}

type DecodeRawTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// The serialized transaction size
	Size uint32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// The virtual transaction size (differs from
	// 'size' for witness transactions).
	VirtualSize uint32 `protobuf:"varint,4,opt,name=virtual_size,json=virtualSize,proto3" json:"virtual_size,omitempty"`
	// The transaction's weight
	Weight   uint32    `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty"`
	Version  uint32    `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	Locktime uint32    `protobuf:"varint,7,opt,name=locktime,proto3" json:"locktime,omitempty"`
	Inputs   []*Input  `protobuf:"bytes,8,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs  []*Output `protobuf:"bytes,9,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *DecodeRawTransactionResponse) Reset() {
	*x = DecodeRawTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeRawTransactionResponse) ProtoMessage() {}

func (x *DecodeRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*DecodeRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{22}
}

func (x *DecodeRawTransactionResponse) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *DecodeRawTransactionResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *DecodeRawTransactionResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DecodeRawTransactionResponse) GetVirtualSize() uint32 {
	if x != nil {
		return x.VirtualSize
	}
	return 0
}

func (x *DecodeRawTransactionResponse) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *DecodeRawTransactionResponse) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DecodeRawTransactionResponse) GetLocktime() uint32 {
	if x != nil {
		return x.Locktime
	}
	return 0
}

func (x *DecodeRawTransactionResponse) GetInputs() []*Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *DecodeRawTransactionResponse) GetOutputs() []*Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// balances from outputs that the wallet can sign
type GetBalancesResponse_Mine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trusted balance (outputs created by the wallet or confirmed outputs)
	Trusted float64 `protobuf:"fixed64,1,opt,name=trusted,proto3" json:"trusted,omitempty"`
	// untrusted pending balance (outputs created by others that are in the mempool)
	UntrustedPending float64 `protobuf:"fixed64,2,opt,name=untrusted_pending,json=untrustedPending,proto3" json:"untrusted_pending,omitempty"`
	// balance from immature coinbase outputs
	Immature float64 `protobuf:"fixed64,3,opt,name=immature,proto3" json:"immature,omitempty"`
	// only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating
	Used float64 `protobuf:"fixed64,4,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *GetBalancesResponse_Mine) Reset() {
	*x = GetBalancesResponse_Mine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalancesResponse_Mine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesResponse_Mine) ProtoMessage() {}

func (x *GetBalancesResponse_Mine) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesResponse_Mine.ProtoReflect.Descriptor instead.
func (*GetBalancesResponse_Mine) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetBalancesResponse_Mine) GetTrusted() float64 {
	if x != nil {
		return x.Trusted
	}
	return 0
}

func (x *GetBalancesResponse_Mine) GetUntrustedPending() float64 {
	if x != nil {
		return x.UntrustedPending
	}
	return 0
}

func (x *GetBalancesResponse_Mine) GetImmature() float64 {
	if x != nil {
		return x.Immature
	}
	return 0
}

func (x *GetBalancesResponse_Mine) GetUsed() float64 {
	if x != nil {
		return x.Used
	}
	return 0
}

// watchonly balances (not present if wallet does not watch anything)
type GetBalancesResponse_Watchonly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trusted balance (outputs created by the wallet or confirmed outputs)
	Trusted float64 `protobuf:"fixed64,1,opt,name=trusted,proto3" json:"trusted,omitempty"`
	// untrusted pending balance (outputs created by others that are in the mempool)
	UntrustedPending float64 `protobuf:"fixed64,2,opt,name=untrusted_pending,json=untrustedPending,proto3" json:"untrusted_pending,omitempty"`
	// balance from immature coinbase outputs
	Immature float64 `protobuf:"fixed64,3,opt,name=immature,proto3" json:"immature,omitempty"`
}

func (x *GetBalancesResponse_Watchonly) Reset() {
	*x = GetBalancesResponse_Watchonly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalancesResponse_Watchonly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalancesResponse_Watchonly) ProtoMessage() {}

func (x *GetBalancesResponse_Watchonly) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalancesResponse_Watchonly.ProtoReflect.Descriptor instead.
func (*GetBalancesResponse_Watchonly) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{7, 1}
}

func (x *GetBalancesResponse_Watchonly) GetTrusted() float64 {
	if x != nil {
		return x.Trusted
	}
	return 0
}

func (x *GetBalancesResponse_Watchonly) GetUntrustedPending() float64 {
	if x != nil {
		return x.UntrustedPending
	}
	return 0
}

func (x *GetBalancesResponse_Watchonly) GetImmature() float64 {
	if x != nil {
		return x.Immature
	}
	return 0
}

type GetTransactionResponse_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvolvesWatchOnly bool   `protobuf:"varint,1,opt,name=involves_watch_only,json=involvesWatchOnly,proto3" json:"involves_watch_only,omitempty"`
	Address           string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// TODO: enum - send, receive, generate, immature, orphan
	Category GetTransactionResponse_Category `protobuf:"varint,3,opt,name=category,proto3,enum=bitcoin.bitcoind.v1alpha.GetTransactionResponse_Category" json:"category,omitempty"`
	Amount   float64                         `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// string label = 5;
	Vout uint32  `protobuf:"varint,6,opt,name=vout,proto3" json:"vout,omitempty"`
	Fee  float64 `protobuf:"fixed64,7,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *GetTransactionResponse_Details) Reset() {
	*x = GetTransactionResponse_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResponse_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse_Details) ProtoMessage() {}

func (x *GetTransactionResponse_Details) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse_Details.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse_Details) Descriptor() ([]byte, []int) {
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP(), []int{10, 0}
}

func (x *GetTransactionResponse_Details) GetInvolvesWatchOnly() bool {
	if x != nil {
		return x.InvolvesWatchOnly
	}
	return false
}

func (x *GetTransactionResponse_Details) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetTransactionResponse_Details) GetCategory() GetTransactionResponse_Category {
	if x != nil {
		return x.Category
	}
	return GetTransactionResponse_CATEGORY_UNSPECIFIED
}

func (x *GetTransactionResponse_Details) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetTransactionResponse_Details) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *GetTransactionResponse_Details) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

var File_bitcoin_bitcoind_v1alpha_bitcoin_proto protoreflect.FileDescriptor

var file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDesc = []byte{
	0x0a, 0x26, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xae, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0x31, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2e, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0xee, 0x03, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x68, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6b, 0x65, 0x79, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x61, 0x79, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x2c, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22, 0xa3, 0x03, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x09, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x6e,
	0x6c, 0x79, 0x1a, 0x7d, 0x0a, 0x04, 0x4d, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x75, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x1a, 0x6e, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6d, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x44, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x6f, 0x6e,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x22, 0x88, 0x09, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x42, 0x79, 0x54,
	0x78, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x5f,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x54, 0x78, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x12, 0x62, 0x69, 0x70,
	0x31, 0x32, 0x35, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x11, 0x62, 0x69, 0x70, 0x31, 0x32, 0x35, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x65,
	0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x1a, 0xe8, 0x01, 0x0a,
	0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x6f,
	0x6c, 0x76, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x76, 0x6f, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x10, 0x02, 0x22, 0x90, 0x01, 0x0a,
	0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x49, 0x4d, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x52, 0x50, 0x48, 0x41, 0x4e, 0x10, 0x05, 0x22,
	0x48, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x05, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7c, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0xc0, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x61, 0x77, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x12, 0x37,
	0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x61, 0x66,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x62, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x3f, 0x0a, 0x11,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x78, 0x0a,
	0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x02, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x22, 0x8c, 0x02, 0x0a, 0x17, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x63, 0x0a, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x62, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x6b, 0x0a, 0x0c, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x53, 0x54,
	0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x53, 0x54, 0x49,
	0x4d, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x43, 0x4f, 0x4e, 0x4f, 0x4d,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41,
	0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x52, 0x56, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x22, 0x65, 0x0a, 0x18, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x57, 0x0a,
	0x1b, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x02,
	0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x22, 0x36, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x68, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x65, 0x78, 0x22, 0xc0,
	0x02, 0x0a, 0x1c, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x32, 0xab, 0x08, 0x0a, 0x0e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x2e, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x73, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x25, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79,
	0x0a, 0x10, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46,
	0x65, 0x65, 0x12, 0x31, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x65,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0xfb, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x42, 0x0c, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x72,
	0x65, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x62, 0x74, 0x63, 0x2d, 0x62, 0x75, 0x66,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x62, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x62, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03,
	0x42, 0x42, 0x58, 0xaa, 0x02, 0x18, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02,
	0x18, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x5c, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e,
	0x64, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x24, 0x42, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x5c, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x1a, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x3a, 0x3a, 0x42, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescOnce sync.Once
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescData = file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDesc
)

func file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescGZIP() []byte {
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescOnce.Do(func() {
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescData = protoimpl.X.CompressGZIP(file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescData)
	})
	return file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDescData
}

var file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_bitcoin_bitcoind_v1alpha_bitcoin_proto_goTypes = []interface{}{
	(GetTransactionResponse_Replaceable)(0),   // 0: bitcoin.bitcoind.v1alpha.GetTransactionResponse.Replaceable
	(GetTransactionResponse_Category)(0),      // 1: bitcoin.bitcoind.v1alpha.GetTransactionResponse.Category
	(EstimateSmartFeeRequest_EstimateMode)(0), // 2: bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest.EstimateMode
	(*GetBlockchainInfoRequest)(nil),          // 3: bitcoin.bitcoind.v1alpha.GetBlockchainInfoRequest
	(*GetBlockchainInfoResponse)(nil),         // 4: bitcoin.bitcoind.v1alpha.GetBlockchainInfoResponse
	(*GetNewAddressRequest)(nil),              // 5: bitcoin.bitcoind.v1alpha.GetNewAddressRequest
	(*GetNewAddressResponse)(nil),             // 6: bitcoin.bitcoind.v1alpha.GetNewAddressResponse
	(*GetWalletInfoRequest)(nil),              // 7: bitcoin.bitcoind.v1alpha.GetWalletInfoRequest
	(*GetWalletInfoResponse)(nil),             // 8: bitcoin.bitcoind.v1alpha.GetWalletInfoResponse
	(*GetBalancesRequest)(nil),                // 9: bitcoin.bitcoind.v1alpha.GetBalancesRequest
	(*GetBalancesResponse)(nil),               // 10: bitcoin.bitcoind.v1alpha.GetBalancesResponse
	(*WalletScan)(nil),                        // 11: bitcoin.bitcoind.v1alpha.WalletScan
	(*GetTransactionRequest)(nil),             // 12: bitcoin.bitcoind.v1alpha.GetTransactionRequest
	(*GetTransactionResponse)(nil),            // 13: bitcoin.bitcoind.v1alpha.GetTransactionResponse
	(*GetRawTransactionRequest)(nil),          // 14: bitcoin.bitcoind.v1alpha.GetRawTransactionRequest
	(*Input)(nil),                             // 15: bitcoin.bitcoind.v1alpha.Input
	(*ScriptPubKey)(nil),                      // 16: bitcoin.bitcoind.v1alpha.ScriptPubKey
	(*Output)(nil),                            // 17: bitcoin.bitcoind.v1alpha.Output
	(*GetRawTransactionResponse)(nil),         // 18: bitcoin.bitcoind.v1alpha.GetRawTransactionResponse
	(*SendRequest)(nil),                       // 19: bitcoin.bitcoind.v1alpha.SendRequest
	(*SendResponse)(nil),                      // 20: bitcoin.bitcoind.v1alpha.SendResponse
	(*EstimateSmartFeeRequest)(nil),           // 21: bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest
	(*EstimateSmartFeeResponse)(nil),          // 22: bitcoin.bitcoind.v1alpha.EstimateSmartFeeResponse
	(*DecodeRawTransactionRequest)(nil),       // 23: bitcoin.bitcoind.v1alpha.DecodeRawTransactionRequest
	(*RawTransaction)(nil),                    // 24: bitcoin.bitcoind.v1alpha.RawTransaction
	(*DecodeRawTransactionResponse)(nil),      // 25: bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse
	(*GetBalancesResponse_Mine)(nil),          // 26: bitcoin.bitcoind.v1alpha.GetBalancesResponse.Mine
	(*GetBalancesResponse_Watchonly)(nil),     // 27: bitcoin.bitcoind.v1alpha.GetBalancesResponse.Watchonly
	(*GetTransactionResponse_Details)(nil),    // 28: bitcoin.bitcoind.v1alpha.GetTransactionResponse.Details
	nil,                                       // 29: bitcoin.bitcoind.v1alpha.SendRequest.DestinationsEntry
	(*timestamppb.Timestamp)(nil),             // 30: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),              // 31: google.protobuf.BoolValue
}
var file_bitcoin_bitcoind_v1alpha_bitcoin_proto_depIdxs = []int32{
	11, // 0: bitcoin.bitcoind.v1alpha.GetWalletInfoResponse.scanning:type_name -> bitcoin.bitcoind.v1alpha.WalletScan
	26, // 1: bitcoin.bitcoind.v1alpha.GetBalancesResponse.mine:type_name -> bitcoin.bitcoind.v1alpha.GetBalancesResponse.Mine
	27, // 2: bitcoin.bitcoind.v1alpha.GetBalancesResponse.watchonly:type_name -> bitcoin.bitcoind.v1alpha.GetBalancesResponse.Watchonly
	30, // 3: bitcoin.bitcoind.v1alpha.GetTransactionResponse.block_time:type_name -> google.protobuf.Timestamp
	30, // 4: bitcoin.bitcoind.v1alpha.GetTransactionResponse.time:type_name -> google.protobuf.Timestamp
	30, // 5: bitcoin.bitcoind.v1alpha.GetTransactionResponse.time_received:type_name -> google.protobuf.Timestamp
	0,  // 6: bitcoin.bitcoind.v1alpha.GetTransactionResponse.bip125_replaceable:type_name -> bitcoin.bitcoind.v1alpha.GetTransactionResponse.Replaceable
	28, // 7: bitcoin.bitcoind.v1alpha.GetTransactionResponse.details:type_name -> bitcoin.bitcoind.v1alpha.GetTransactionResponse.Details
	16, // 8: bitcoin.bitcoind.v1alpha.Output.script_pub_key:type_name -> bitcoin.bitcoind.v1alpha.ScriptPubKey
	24, // 9: bitcoin.bitcoind.v1alpha.GetRawTransactionResponse.tx:type_name -> bitcoin.bitcoind.v1alpha.RawTransaction
	15, // 10: bitcoin.bitcoind.v1alpha.GetRawTransactionResponse.inputs:type_name -> bitcoin.bitcoind.v1alpha.Input
	17, // 11: bitcoin.bitcoind.v1alpha.GetRawTransactionResponse.outputs:type_name -> bitcoin.bitcoind.v1alpha.Output
	29, // 12: bitcoin.bitcoind.v1alpha.SendRequest.destinations:type_name -> bitcoin.bitcoind.v1alpha.SendRequest.DestinationsEntry
	31, // 13: bitcoin.bitcoind.v1alpha.SendRequest.add_to_wallet:type_name -> google.protobuf.BoolValue
	24, // 14: bitcoin.bitcoind.v1alpha.SendResponse.tx:type_name -> bitcoin.bitcoind.v1alpha.RawTransaction
	2,  // 15: bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest.estimate_mode:type_name -> bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest.EstimateMode
	24, // 16: bitcoin.bitcoind.v1alpha.DecodeRawTransactionRequest.tx:type_name -> bitcoin.bitcoind.v1alpha.RawTransaction
	15, // 17: bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse.inputs:type_name -> bitcoin.bitcoind.v1alpha.Input
	17, // 18: bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse.outputs:type_name -> bitcoin.bitcoind.v1alpha.Output
	1,  // 19: bitcoin.bitcoind.v1alpha.GetTransactionResponse.Details.category:type_name -> bitcoin.bitcoind.v1alpha.GetTransactionResponse.Category
	3,  // 20: bitcoin.bitcoind.v1alpha.BitcoinService.GetBlockchainInfo:input_type -> bitcoin.bitcoind.v1alpha.GetBlockchainInfoRequest
	12, // 21: bitcoin.bitcoind.v1alpha.BitcoinService.GetTransaction:input_type -> bitcoin.bitcoind.v1alpha.GetTransactionRequest
	5,  // 22: bitcoin.bitcoind.v1alpha.BitcoinService.GetNewAddress:input_type -> bitcoin.bitcoind.v1alpha.GetNewAddressRequest
	7,  // 23: bitcoin.bitcoind.v1alpha.BitcoinService.GetWalletInfo:input_type -> bitcoin.bitcoind.v1alpha.GetWalletInfoRequest
	9,  // 24: bitcoin.bitcoind.v1alpha.BitcoinService.GetBalances:input_type -> bitcoin.bitcoind.v1alpha.GetBalancesRequest
	19, // 25: bitcoin.bitcoind.v1alpha.BitcoinService.Send:input_type -> bitcoin.bitcoind.v1alpha.SendRequest
	21, // 26: bitcoin.bitcoind.v1alpha.BitcoinService.EstimateSmartFee:input_type -> bitcoin.bitcoind.v1alpha.EstimateSmartFeeRequest
	14, // 27: bitcoin.bitcoind.v1alpha.BitcoinService.GetRawTransaction:input_type -> bitcoin.bitcoind.v1alpha.GetRawTransactionRequest
	23, // 28: bitcoin.bitcoind.v1alpha.BitcoinService.DecodeRawTransaction:input_type -> bitcoin.bitcoind.v1alpha.DecodeRawTransactionRequest
	4,  // 29: bitcoin.bitcoind.v1alpha.BitcoinService.GetBlockchainInfo:output_type -> bitcoin.bitcoind.v1alpha.GetBlockchainInfoResponse
	13, // 30: bitcoin.bitcoind.v1alpha.BitcoinService.GetTransaction:output_type -> bitcoin.bitcoind.v1alpha.GetTransactionResponse
	6,  // 31: bitcoin.bitcoind.v1alpha.BitcoinService.GetNewAddress:output_type -> bitcoin.bitcoind.v1alpha.GetNewAddressResponse
	8,  // 32: bitcoin.bitcoind.v1alpha.BitcoinService.GetWalletInfo:output_type -> bitcoin.bitcoind.v1alpha.GetWalletInfoResponse
	10, // 33: bitcoin.bitcoind.v1alpha.BitcoinService.GetBalances:output_type -> bitcoin.bitcoind.v1alpha.GetBalancesResponse
	20, // 34: bitcoin.bitcoind.v1alpha.BitcoinService.Send:output_type -> bitcoin.bitcoind.v1alpha.SendResponse
	22, // 35: bitcoin.bitcoind.v1alpha.BitcoinService.EstimateSmartFee:output_type -> bitcoin.bitcoind.v1alpha.EstimateSmartFeeResponse
	18, // 36: bitcoin.bitcoind.v1alpha.BitcoinService.GetRawTransaction:output_type -> bitcoin.bitcoind.v1alpha.GetRawTransactionResponse
	25, // 37: bitcoin.bitcoind.v1alpha.BitcoinService.DecodeRawTransaction:output_type -> bitcoin.bitcoind.v1alpha.DecodeRawTransactionResponse
	29, // [29:38] is the sub-list for method output_type
	20, // [20:29] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_bitcoin_bitcoind_v1alpha_bitcoin_proto_init() }
func file_bitcoin_bitcoind_v1alpha_bitcoin_proto_init() {
	if File_bitcoin_bitcoind_v1alpha_bitcoin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWalletInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateSmartFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstimateSmartFeeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeRawTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeRawTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalancesResponse_Mine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalancesResponse_Watchonly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResponse_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bitcoin_bitcoind_v1alpha_bitcoin_proto_goTypes,
		DependencyIndexes: file_bitcoin_bitcoind_v1alpha_bitcoin_proto_depIdxs,
		EnumInfos:         file_bitcoin_bitcoind_v1alpha_bitcoin_proto_enumTypes,
		MessageInfos:      file_bitcoin_bitcoind_v1alpha_bitcoin_proto_msgTypes,
	}.Build()
	File_bitcoin_bitcoind_v1alpha_bitcoin_proto = out.File
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_rawDesc = nil
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_goTypes = nil
	file_bitcoin_bitcoind_v1alpha_bitcoin_proto_depIdxs = nil
}
