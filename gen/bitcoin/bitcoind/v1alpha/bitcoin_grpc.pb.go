// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bitcoin/bitcoind/v1alpha/bitcoin.proto

package bitcoindv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BitcoinService_GetBlockchainInfo_FullMethodName = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetBlockchainInfo"
	BitcoinService_GetTransaction_FullMethodName    = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetTransaction"
	BitcoinService_GetNewAddress_FullMethodName     = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetNewAddress"
	BitcoinService_GetWalletInfo_FullMethodName     = "/bitcoin.bitcoind.v1alpha.BitcoinService/GetWalletInfo"
)

// BitcoinServiceClient is the client API for BitcoinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BitcoinServiceClient interface {
	GetBlockchainInfo(ctx context.Context, in *GetBlockchainInfoRequest, opts ...grpc.CallOption) (*GetBlockchainInfoResponse, error)
	// Fetches in-wallet transactions
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// Wallet stuff
	GetNewAddress(ctx context.Context, in *GetNewAddressRequest, opts ...grpc.CallOption) (*GetNewAddressResponse, error)
	GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...grpc.CallOption) (*GetWalletInfoResponse, error)
}

type bitcoinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBitcoinServiceClient(cc grpc.ClientConnInterface) BitcoinServiceClient {
	return &bitcoinServiceClient{cc}
}

func (c *bitcoinServiceClient) GetBlockchainInfo(ctx context.Context, in *GetBlockchainInfoRequest, opts ...grpc.CallOption) (*GetBlockchainInfoResponse, error) {
	out := new(GetBlockchainInfoResponse)
	err := c.cc.Invoke(ctx, BitcoinService_GetBlockchainInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, BitcoinService_GetTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinServiceClient) GetNewAddress(ctx context.Context, in *GetNewAddressRequest, opts ...grpc.CallOption) (*GetNewAddressResponse, error) {
	out := new(GetNewAddressResponse)
	err := c.cc.Invoke(ctx, BitcoinService_GetNewAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinServiceClient) GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...grpc.CallOption) (*GetWalletInfoResponse, error) {
	out := new(GetWalletInfoResponse)
	err := c.cc.Invoke(ctx, BitcoinService_GetWalletInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BitcoinServiceServer is the server API for BitcoinService service.
// All implementations should embed UnimplementedBitcoinServiceServer
// for forward compatibility
type BitcoinServiceServer interface {
	GetBlockchainInfo(context.Context, *GetBlockchainInfoRequest) (*GetBlockchainInfoResponse, error)
	// Fetches in-wallet transactions
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	// Wallet stuff
	GetNewAddress(context.Context, *GetNewAddressRequest) (*GetNewAddressResponse, error)
	GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoResponse, error)
}

// UnimplementedBitcoinServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBitcoinServiceServer struct {
}

func (UnimplementedBitcoinServiceServer) GetBlockchainInfo(context.Context, *GetBlockchainInfoRequest) (*GetBlockchainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchainInfo not implemented")
}
func (UnimplementedBitcoinServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedBitcoinServiceServer) GetNewAddress(context.Context, *GetNewAddressRequest) (*GetNewAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAddress not implemented")
}
func (UnimplementedBitcoinServiceServer) GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletInfo not implemented")
}

// UnsafeBitcoinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BitcoinServiceServer will
// result in compilation errors.
type UnsafeBitcoinServiceServer interface {
	mustEmbedUnimplementedBitcoinServiceServer()
}

func RegisterBitcoinServiceServer(s grpc.ServiceRegistrar, srv BitcoinServiceServer) {
	s.RegisterService(&BitcoinService_ServiceDesc, srv)
}

func _BitcoinService_GetBlockchainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinServiceServer).GetBlockchainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinService_GetBlockchainInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinServiceServer).GetBlockchainInfo(ctx, req.(*GetBlockchainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitcoinService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitcoinService_GetNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinServiceServer).GetNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinService_GetNewAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinServiceServer).GetNewAddress(ctx, req.(*GetNewAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitcoinService_GetWalletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinServiceServer).GetWalletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinService_GetWalletInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinServiceServer).GetWalletInfo(ctx, req.(*GetWalletInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BitcoinService_ServiceDesc is the grpc.ServiceDesc for BitcoinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BitcoinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitcoin.bitcoind.v1alpha.BitcoinService",
	HandlerType: (*BitcoinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockchainInfo",
			Handler:    _BitcoinService_GetBlockchainInfo_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _BitcoinService_GetTransaction_Handler,
		},
		{
			MethodName: "GetNewAddress",
			Handler:    _BitcoinService_GetNewAddress_Handler,
		},
		{
			MethodName: "GetWalletInfo",
			Handler:    _BitcoinService_GetWalletInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitcoin/bitcoind/v1alpha/bitcoin.proto",
}
