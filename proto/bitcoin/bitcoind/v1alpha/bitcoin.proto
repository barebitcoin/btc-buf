syntax = "proto3";

package bitcoin.bitcoind.v1alpha;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service BitcoinService {
  rpc GetBlockchainInfo(GetBlockchainInfoRequest) returns (GetBlockchainInfoResponse);

  // Fetches in-wallet transactions
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);

  // Wallet stuff
  rpc GetNewAddress(GetNewAddressRequest) returns (GetNewAddressResponse);
  rpc GetWalletInfo(GetWalletInfoRequest) returns (GetWalletInfoResponse);
  rpc GetBalances(GetBalancesRequest) returns (GetBalancesResponse);
  rpc Send(SendRequest) returns (SendResponse);
  rpc EstimateSmartFee(EstimateSmartFeeRequest) returns (EstimateSmartFeeResponse);

  // Raw TX stuff
  rpc GetRawTransaction(GetRawTransactionRequest) returns (GetRawTransactionResponse);
  rpc DecodeRawTransaction(DecodeRawTransactionRequest) returns (DecodeRawTransactionResponse);
}

message GetBlockchainInfoRequest {}
message GetBlockchainInfoResponse {
  string best_block_hash = 1;
  string chain = 2;
  string chain_work = 3;
  bool initial_block_download = 4;
}

message GetNewAddressRequest {
  string label = 1;
  string address_type = 2;

  // Only needs to be set if dealing with multiple wallets at the same time.
  // TODO: better suited as a header?
  string wallet = 3;
}

message GetNewAddressResponse {
  string address = 1;
}

message GetWalletInfoRequest {
  // Only needs to be set if dealing with multiple wallets at the same time.
  // TODO: better suited as a header?
  string wallet = 1;
}

message GetWalletInfoResponse {
  string wallet_name = 1;
  int64 wallet_version = 2;
  string format = 3;

  // The following fields are left out, as they are deprecated.
  // double balance = 4;
  // double unconfirmed_balance = 5;
  // double immature_balance = 6;

  int64 tx_count = 7;
  int64 key_pool_size = 8;
  int64 key_pool_size_hd_internal = 9;
  double pay_tx_fee = 10;
  bool private_keys_enabled = 11;
  bool avoid_reuse = 12;

  // Not set if no scan is in progress.
  WalletScan scanning = 13;
  bool descriptors = 14;
  bool external_signer = 15;
}

message GetBalancesRequest {
  string wallet = 1;
}

message GetBalancesResponse {
  // balances from outputs that the wallet can sign
  message Mine {
    // trusted balance (outputs created by the wallet or confirmed outputs)
    double trusted = 1;

    // untrusted pending balance (outputs created by others that are in the mempool)
    double untrusted_pending = 2;

    // balance from immature coinbase outputs
    double immature = 3;

    // only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating
    double used = 4;
  }

  // watchonly balances (not present if wallet does not watch anything)
  message Watchonly {
    // trusted balance (outputs created by the wallet or confirmed outputs)
    double trusted = 1;

    // untrusted pending balance (outputs created by others that are in the mempool)
    double untrusted_pending = 2;

    // balance from immature coinbase outputs
    double immature = 3;
  }

  Mine mine = 1;
  Watchonly watchonly = 2;
}

message WalletScan {
  int64 duration = 1;
  double progress = 2;
}

message GetTransactionRequest {
  string txid = 1;
  bool include_watchonly = 2;
  bool verbose = 3;
  string wallet = 4;
}

// Commented fields are not present in btcd/rpcclient
message GetTransactionResponse {
  double amount = 1;
  double fee = 2;

  // The number of confirmations for the transaction. Negative
  // confirmations means the transaction conflicted that many
  // blocks ago.
  int32 confirmations = 3;
  // bool generated = 4;
  // bool trusted = 5;
  string block_hash = 6;
  // string block_height = 7;
  uint32 block_index = 8;
  google.protobuf.Timestamp block_time = 9;
  string txid = 10;
  // string witness_txid = 11;
  repeated string wallet_conflicts = 12;
  string replaced_by_txid = 13;
  string replaces_txid = 14;
  // string comment = 15;
  // string to = 16;
  google.protobuf.Timestamp time = 17;
  google.protobuf.Timestamp time_received = 18;

  // Whether this transaction signals BIP125 (Replace-by-fee, RBF) replaceability
  // or has an unconfirmed ancestor signaling BIP125 replaceability. May be unspecified
  // for unconfirmed transactions not in the mempool because their
  // unconfirmed ancestors are unknown.
  //
  // Note that this is always set to 'no' once the transaction is confirmed.
  Replaceable bip125_replaceable = 19;

  // repeated string parent_descriptors = 20;

  enum Replaceable {
    REPLACEABLE_UNSPECIFIED = 0;
    REPLACEABLE_YES = 1;
    REPLACEABLE_NO = 2;
  }

  enum Category {
    CATEGORY_UNSPECIFIED = 0;
    CATEGORY_SEND = 1;
    CATEGORY_RECEIVE = 2;
    CATEGORY_GENERATE = 3;
    CATEGORY_IMMATURE = 4;
    CATEGORY_ORPHAN = 5;
  }

  message Details {
    bool involves_watch_only = 1;
    string address = 2;
    // TODO: enum - send, receive, generate, immature, orphan
    Category category = 3;
    double amount = 4;
    // string label = 5;
    uint32 vout = 6;
    double fee = 7;
    // bool abandoned = 8;
    // repeated string parent_descriptors = 9;
  }

  repeated Details details = 21;

  string hex = 22;

  // TODO: add the 'decoded' field.
}

message GetRawTransactionRequest {
  // The transaction ID. Required.
  string txid = 1;

  // If false, returns just the hex string. Otherwise, returns the complete object.
  bool verbose = 2;

  // The block in which to look for the transaction
  // TODO: not supported by rpcclient
  // string blockhash = 3;
}

message Input {
  string txid = 1;
  uint32 vout = 2;
}

message ScriptPubKey {
  string type = 1;
  string address = 2;
}

message Output {
  double amount = 1;

  // The output index
  uint32 n = 2;

  ScriptPubKey script_pub_key = 3;
}

message GetRawTransactionResponse {
  RawTransaction tx = 1;

  repeated Input inputs = 2;

  repeated Output outputs = 3;

  string blockhash = 4;
  uint32 confirmations = 5;
  int64 time = 6;
  int64 blocktime = 7;
}

message SendRequest {
  // bitcoin address -> BTC amount
  map<string, double> destinations = 1;

  // Confirmation target in blocks.
  uint32 conf_target = 2;

  // Only needs to be set if dealing with multiple wallets at the same time.
  // TODO: better suited as a header?
  string wallet = 3;

  // Include inputs that are not safe to spend (unconfirmed transactions from
  // outside keys and unconfirmed replacement transactions.
  bool include_unsafe = 4;

  // Outouts to subtract the fee from, specified as as address from the
  // 'destinations' field. The fee will be equally deducted from the amount of
  // each specified output.
  repeated string subtract_fee_from_outputs = 5;

  // When false, returns a serialized transaction which will not be added
  // to the wallet or broadcast.
  //
  // This is a 'bool value' instead of a plain bool. This is clunky to
  // work with, but the alternative would have been to either:
  //
  // 1. Have this be a bool with the default value as the opposite of
  //    Bitcoin Core
  // 2. Rename the parameter to something else.
  //
  // Both of these seem bad.
  google.protobuf.BoolValue add_to_wallet = 6;

  // Satoshis per virtual byte (sat/vB).
  double fee_rate = 7;
}

message SendResponse {
  string txid = 1;
  bool complete = 2;

  // If 'add_to_wallet' is false, the raw transaction with signature(s)
  RawTransaction tx = 3;
}

message EstimateSmartFeeRequest {
  int64 conf_target = 1;

  enum EstimateMode {
    ESTIMATE_MODE_UNSPECIFIED = 0;
    ESTIMATE_MODE_ECONOMICAL = 1;
    ESTIMATE_MODE_CONSERVATIVE = 2;
  }
  EstimateMode estimate_mode = 2;
}

message EstimateSmartFeeResponse {
  // Estimate fee rate in BTC/kvB (only present if no errors were encountered)
  double fee_rate = 1;

  // Errors encountered during processing (if there are any)
  repeated string errors = 2;

  // Block number where estimate was found.
  int64 blocks = 3;
}

message DecodeRawTransactionRequest {
  RawTransaction tx = 1;
}

message RawTransaction {
  // Raw transaction data
  bytes data = 1;

  // Hex-encoded raw transaction data
  string hex = 2;
}

message DecodeRawTransactionResponse {
  string txid = 1;
  string hash = 2;

  // The serialized transaction size
  uint32 size = 3;

  // The virtual transaction size (differs from
  // 'size' for witness transactions).
  uint32 virtual_size = 4;

  // The transaction's weight
  uint32 weight = 5;

  uint32 version = 6;

  uint32 locktime = 7;

  repeated Input inputs = 8;

  repeated Output outputs = 9;
}
